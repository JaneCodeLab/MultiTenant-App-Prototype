 using ApplicationCore; using ApplicationCore.DomainModel; using ApplicationCore.IRepository.Model; using Infrastructure.Helpers; using Microsoft.EntityFrameworkCore; using System.Linq.Expressions;  namespace ApplicationService;  public interface IBaseService<T, BT, CT> where T : BaseEntity<BT> where CT : DbContext {     Task<T?> GetAsync(BT id);     Task<ICollection<T>> GetAllAsync(BaseFilter filter, string sourceTimeZoneId);     Task<PagedList<DTO>> GetAllPagedAsync<DTO>(BaseFilter filter, DataTablePagination<T> pagination, Expression<Func<T, DTO>> select, string sourceTimeZoneId, Language language) where DTO : class, new();     Task<ICollection<T>> GetAllForSelect(Expression<Func<T, object>> orderBy, bool active);     Task<ServiceResult> CreateAsync(T model, SysCustomUser user);     Task<ServiceResult> ChangeActivateAsync(BT id, bool active, SysCustomUser user);          Task<ServiceResult> LockAsync(SysCustomUser user, BT id);     Task<ServiceResult> UnlockAsync(SysCustomUser user, BT id);     Task<ServiceResult> ChangeLockAsync(BT id, bool active, SysCustomUser user);      Task<ServiceResult> UpdateAsync(T model, SysCustomUser user);     Task<ServiceResult> PermanentDeleteAsync(SysCustomUser user, BT id);     Task<ServiceResult> SoftDeleteAsync(SysCustomUser user, BT id);     Task<ServiceResult> RollbackSoftDeleteAsync(SysCustomUser user, BT id);     Task<bool> Any(Expression<Func<T, bool>> predicate);     Task<T> FirstAsync(Expression<Func<T, bool>> predicate);     Task<bool> IsLockedAsync(BT id);     Task<DuplicationResult> IsDuplicated(T model, CrudType ctype); }